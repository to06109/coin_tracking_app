{"version":3,"sources":["routes/api.tsx","atoms.tsx","routes/Chart.tsx","routes/Price.tsx","routes/Coin.tsx","routes/Coins.tsx","Router.tsx","theme.ts","App.tsx","index.tsx"],"names":["BASE_URL","fetchCoins","a","fetch","then","response","json","fetchCoinTickers","coinId","isDarkAtom","atom","key","default","Chart","isDark","useRecoilValue","useQuery","endDate","Math","floor","Date","now","startDate","fetchCoinHistory","refetchInterval","isLoading","data","mappedChaetData","map","price","x","time_close","y","open","toFixed","high","low","close","type","series","options","theme","mode","chart","height","width","toolbar","show","xaxis","axisTicks","labels","yaxis","H1","styled","div","props","accentColor","Price","priceData","mappedPriceData","quotes","USD","percent_change_15m","percent_change_30m","percent_change_1h","percent_change_6h","percent_change_12h","percent_change_24h","percent_change_30d","percent_change_1y","style","backgroundColor","plotOptions","bar","borderRadius","horizontal","categories","fill","gradient","gradientToColors","stops","Container","Header","header","Overview","viewColor","OverviewItem","Description","p","Tabs","Tab","span","isActive","textColor","Title","h1","Loader","BackBtn","button","Coin","useParams","state","useLocation","priceMatch","useRouteMatch","chartMatch","fetchCoininfo","infoLoading","infoData","tickersLoading","tickersData","loading","Helmet","name","rank","symbol","description","total_supply","max_supply","to","path","display","pathname","CoinsList","ul","li","bgColor","Img","img","StyledLink","Link","DarkBtn","Coins","setDarkAtom","useSetRecoilState","onClick","prev","slice","coin","id","src","Router","darkTheme","lightTheme","GlobalStyle","createGlobalStyle","App","initialIsOpen","queryClient","QueryClient","ReactDOM","render","StrictMode","client","document","getElementById"],"mappings":"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","file":"static/js/main.402ec3b9.chunk.js","sourcesContent":["const BASE_URL = `https://api.coinpaprika.com/v1`\r\n\r\nexport async function fetchCoins() {\r\n  return fetch(`${BASE_URL}/coins`).then((response) => response.json())\r\n  //   const response = await fetch('https://api.coinpaprika.com/v1/coins')\r\n  //   const json = await response.json()\r\n  //   return json\r\n}\r\n\r\nexport function fetchCoininfo(coinId: string) {\r\n  return fetch(`${BASE_URL}/coins/${coinId}`).then((response) =>\r\n    response.json(),\r\n  )\r\n}\r\n\r\nexport function fetchCoinTickers(coinId: string) {\r\n  return fetch(`${BASE_URL}/tickers/${coinId}`).then((response) =>\r\n    response.json(),\r\n  )\r\n}\r\n\r\n// 비트코인의 open, high, low, close, volume 등의 정보\r\nexport function fetchCoinHistory(coinId: string) {\r\n  // 꼭 보내야 하는 필수 query parameter: 언제를 기준으로 받고싶은가?\r\n  const endDate = Math.floor(Date.now() / 1000) //s로 표현\r\n  const startDate = endDate - 60 * 60 * 24 * 7 * 2 // 이주일 전\r\n\r\n  return fetch(\r\n    `${BASE_URL}/coins/${coinId}/ohlcv/historical?start=${startDate}&end=${endDate}`,\r\n  ).then((response) => response.json())\r\n}\r\n","import { atom } from \"recoil\";\r\n\r\n\r\nexport const isDarkAtom = atom ({\r\n    key: \"isDark\",\r\n    default: false,\r\n})","import { useQuery } from 'react-query'\r\nimport { fetchCoinHistory } from './api'\r\nimport ApexChart from 'react-apexcharts'\r\nimport { useRecoilValue } from 'recoil'\r\nimport { isDarkAtom } from '../atoms'\r\n\r\n// typeScript에게 data 설명하기\r\ninterface IHistorical {\r\n  time_open: string\r\n  time_close: string\r\n  open: number\r\n  high: number\r\n  low: number\r\n  close: number // 종가를 보자\r\n  volume: number\r\n  market_cap: number\r\n}\r\n\r\ninterface ChartProps {\r\n  coinId: string\r\n}\r\n\r\nfunction Chart({ coinId }: ChartProps) {\r\n  const isDark = useRecoilValue(isDarkAtom)\r\n  const { isLoading, data } = useQuery<IHistorical[]>(\r\n    ['ohlcv', coinId],\r\n    () => fetchCoinHistory(coinId),\r\n    {\r\n      refetchInterval: 10000,\r\n    },\r\n  )\r\n\r\n  // candlestick 차트에 넣을 데이터배열\r\n  const mappedChaetData = data?.map((price) => ({\r\n    x: price.time_close,\r\n    y: [\r\n      price.open.toFixed(2),\r\n      price.high.toFixed(2),\r\n      price.low.toFixed(2),\r\n      price.close.toFixed(2),\r\n    ],\r\n  }))\r\n\r\n  return (\r\n    <div>\r\n      {isLoading ? (\r\n        'Loading chart...'\r\n      ) : (\r\n        <ApexChart\r\n          type=\"candlestick\"\r\n          series={([{ data: mappedChaetData }] as unknown) as number[]}\r\n          options={{\r\n            theme: {\r\n              mode: isDark ? 'dark' : 'light',\r\n            },\r\n            chart: {\r\n              // 차트 모양\r\n              height: 500,\r\n              width: 500,\r\n              toolbar: {\r\n                show: false,\r\n              },\r\n            },\r\n            xaxis: {\r\n              type: 'datetime',\r\n              axisTicks: { show: false },\r\n              labels: { show: false },\r\n            },\r\n            yaxis: {\r\n              show: false,\r\n            },\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Chart\r\n","import { fetchCoinTickers } from './api'\r\nimport { useQuery } from 'react-query'\r\nimport ApexChart from 'react-apexcharts'\r\nimport styled from 'styled-components'\r\n\r\ninterface IPriceData {\r\n  id: string\r\n  name: string\r\n  symbol: string\r\n  rank: number\r\n  circulating_supply: number\r\n  total_supply: number\r\n  max_supply: number\r\n  beta_value: number\r\n  first_data_at: string\r\n  last_updated: string\r\n  quotes: {\r\n    USD: {\r\n      ath_date: string\r\n      ath_price: number\r\n      market_cap: number\r\n      market_cap_change_24h: number\r\n      percent_change_1h: number\r\n      percent_change_1y: number\r\n      percent_change_6h: number\r\n      percent_change_7d: number\r\n      percent_change_12h: number\r\n      percent_change_15m: number\r\n      percent_change_24h: number\r\n      percent_change_30d: number\r\n      percent_change_30m: number\r\n      percent_from_price_ath: number\r\n      price: number\r\n      volume_24h: number\r\n      volume_24h_change_24h: number\r\n    }\r\n  }\r\n}\r\n\r\ninterface PriceProps {\r\n  coinId: string\r\n}\r\n\r\nconst H1 = styled.div`\r\n  color: ${(props) => props.theme.accentColor};\r\n  font-weight: bold;\r\n`\r\n\r\nfunction Price({ coinId }: PriceProps) {\r\n  const { isLoading, data: priceData } = useQuery<IPriceData>(\r\n    ['price', coinId],\r\n    () => fetchCoinTickers(coinId),\r\n    {\r\n      refetchInterval: 10000,\r\n    },\r\n  )\r\n\r\n  const mappedPriceData = [\r\n    priceData?.quotes.USD.percent_change_15m,\r\n    priceData?.quotes.USD.percent_change_30m,\r\n    priceData?.quotes.USD.percent_change_1h,\r\n    priceData?.quotes.USD.percent_change_6h,\r\n    priceData?.quotes.USD.percent_change_12h,\r\n    priceData?.quotes.USD.percent_change_24h,\r\n    priceData?.quotes.USD.percent_change_30d,\r\n    priceData?.quotes.USD.percent_change_1y,\r\n  ]\r\n\r\n  return (\r\n    <div style={{ backgroundColor: 'white' }}>\r\n      <H1>percent_change</H1>\r\n      {isLoading ? (\r\n        'Loading price...'\r\n      ) : (\r\n        <ApexChart\r\n          type=\"bar\"\r\n          series={([{ data: mappedPriceData }] as unknown) as number[]}\r\n          options={{\r\n            chart: {\r\n              width: 500,\r\n              height: 500,\r\n            },\r\n            plotOptions: {\r\n              bar: {\r\n                borderRadius: 4,\r\n                horizontal: true,\r\n              },\r\n            },\r\n            xaxis: {\r\n              labels: { show: false },\r\n              categories: ['15m', '30m', '1h', '6h', '12h', '24h', '30d', '1y'],\r\n            },\r\n            fill: {\r\n              // 그라데이션\r\n              type: 'gradient',\r\n              gradient: { gradientToColors: ['#0be881'], stops: [0, 100] },\r\n            },\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Price\r\n","import styled from 'styled-components'\r\nimport { Helmet } from 'react-helmet'\r\nimport {\r\n  Switch,\r\n  Route,\r\n  useLocation,\r\n  useParams,\r\n  Link,\r\n  useRouteMatch,\r\n} from 'react-router-dom'\r\nimport Chart from './Chart'\r\nimport Price from './Price'\r\nimport { useQuery } from 'react-query'\r\nimport { fetchCoininfo, fetchCoinTickers } from './api'\r\n\r\ninterface RouteParams {\r\n  coinId: string\r\n}\r\n\r\nconst Container = styled.div`\r\n  padding: 0px 20px;\r\n  // 화면을 크게 했을 때도 모바일화면처럼 요소들이 가운데에 위치함\r\n  max-width: 480px;\r\n  margin: 0 auto;\r\n`\r\n\r\nconst Header = styled.header`\r\n  height: 10vh;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\n\r\nconst Overview = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  background-color: ${(props) => props.theme.viewColor};\r\n  padding: 10px 20px;\r\n  border-radius: 10px;\r\n`\r\nconst OverviewItem = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  span:first-child {\r\n    font-size: 10px;\r\n    font-weight: 400;\r\n    text-transform: uppercase;\r\n    margin-bottom: 5px;\r\n  }\r\n`\r\nconst Description = styled.p`\r\n  margin: 20px 0px;\r\n`\r\n\r\nconst Tabs = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  margin: 25px 0px;\r\n  gap: 10px;\r\n`\r\nconst Tab = styled.span<{ isActive: boolean }>`\r\n  text-align: center;\r\n  text-transform: uppercase;\r\n  font-size: 12px;\r\n  font-weight: 400;\r\n  background-color: ${(props) => props.theme.viewColor};\r\n  padding: 7px 0px;\r\n  border-radius: 10px;\r\n  color: ${(props) =>\r\n    props.isActive ? props.theme.accentColor : props.theme.textColor};\r\n  a {\r\n    display: block;\r\n  }\r\n`\r\nconst Title = styled.h1`\r\n  font-size: 48px;\r\n  color: ${(props) => props.theme.accentColor};\r\n`\r\n\r\nconst Loader = styled.span`\r\n  text-align: center;\r\n  display: block;\r\n`\r\n\r\nconst BackBtn = styled.button`\r\n  width: 70px;\r\n  height: 30px;\r\n  border-radius: 50px;\r\n  color: ${(props) => props.theme.textColor};\r\n  background-color: ${(props) => props.theme.viewColor};\r\n  border: 2px solid ${(props) => props.theme.textColor};\r\n`\r\n\r\ninterface RouteState {\r\n  name: string\r\n}\r\n\r\ninterface IInfoData {\r\n  // alt + shift + i\r\n  id: string\r\n  name: string\r\n  symbol: string\r\n  rank: number\r\n  is_new: boolean\r\n  is_active: boolean\r\n  type: string\r\n  description: string\r\n  message: string\r\n  open_source: boolean\r\n  started_at: string\r\n  development_status: string\r\n  hardware_wallet: boolean\r\n  proof_type: string\r\n  org_structure: string\r\n  hash_algorithm: string\r\n  first_data_at: string\r\n  last_data_at: string\r\n}\r\n\r\ninterface IPriceData {\r\n  id: string\r\n  name: string\r\n  symbol: string\r\n  rank: number\r\n  circulating_supply: number\r\n  total_supply: number\r\n  max_supply: number\r\n  beta_value: number\r\n  first_data_at: string\r\n  last_updated: string\r\n  quotes: {\r\n    USD: {\r\n      ath_date: string\r\n      ath_price: number\r\n      market_cap: number\r\n      market_cap_change_24h: number\r\n      percent_change_1h: number\r\n      percent_change_1y: number\r\n      percent_change_6h: number\r\n      percent_change_7d: number\r\n      percent_change_12h: number\r\n      percent_change_15m: number\r\n      percent_change_24h: number\r\n      percent_change_30d: number\r\n      percent_change_30m: number\r\n      percent_from_price_ath: number\r\n      price: number\r\n      volume_24h: number\r\n      volume_24h_change_24h: number\r\n    }\r\n  }\r\n}\r\n\r\nfunction Coin() {\r\n  // typeScript한테 우리 URL내에 몇몇 파라미터들이 있다고 말해줘야함\r\n  const { coinId } = useParams<RouteParams>()\r\n  // react router dom이 보내주는 location object에 접근\r\n  // state가 unknown 타입이라 타입스크립트한테 설명해줘야함\r\n  const { state } = useLocation<RouteState>()\r\n  // 우리가 해당 URL에 있는가? 맞으면 Object를 받을거고 아니면 null을 가질거임\r\n  const priceMatch = useRouteMatch('/:coinId/price')\r\n  const chartMatch = useRouteMatch('/:coinId/chart')\r\n  // fetcher 함수에 coinId 보내줘야함\r\n  const { isLoading: infoLoading, data: infoData } = useQuery<IInfoData>(\r\n    ['info', coinId],\r\n    () => fetchCoininfo(coinId),\r\n  )\r\n  const { isLoading: tickersLoading, data: tickersData } = useQuery<IPriceData>(\r\n    ['tickers', coinId],\r\n    () => fetchCoinTickers(coinId),\r\n    {\r\n      // query를 5초마다 fetch\r\n      refetchInterval: 5000,\r\n    },\r\n  )\r\n  const loading = infoLoading || tickersLoading\r\n\r\n  return (\r\n    <Container>\r\n      <Helmet>\r\n        <title>\r\n          {state?.name ? state.name : loading ? 'Loading..' : infoData?.name}\r\n        </title>\r\n      </Helmet>\r\n      <Header>\r\n        <Title>\r\n          {state?.name ? state.name : loading ? 'Loading..' : infoData?.name}\r\n        </Title>\r\n      </Header>\r\n      {loading ? (\r\n        <Loader>Loading...</Loader>\r\n      ) : (\r\n        <>\r\n          <Overview>\r\n            <OverviewItem>\r\n              <span>Rank:</span>\r\n              <span>{infoData?.rank}</span>\r\n            </OverviewItem>\r\n            <OverviewItem>\r\n              <span>Symbol:</span>\r\n              <span>${infoData?.symbol}</span>\r\n            </OverviewItem>\r\n            <OverviewItem>\r\n              <span>Price:</span>\r\n              <span>{tickersData?.quotes.USD.price.toFixed(3)}</span>\r\n            </OverviewItem>\r\n          </Overview>\r\n          <Description>{infoData?.description}</Description>\r\n          <Overview>\r\n            <OverviewItem>\r\n              <span>Total Suply:</span>\r\n              <span>{tickersData?.total_supply}</span>\r\n            </OverviewItem>\r\n            <OverviewItem>\r\n              <span>Max Supply:</span>\r\n              <span>{tickersData?.max_supply}</span>\r\n            </OverviewItem>\r\n          </Overview>\r\n\r\n          <Tabs>\r\n            <Tab isActive={chartMatch !== null}>\r\n              <Link to={`/${coinId}/chart`}>Chart</Link>\r\n            </Tab>\r\n            <Tab isActive={priceMatch !== null}>\r\n              <Link to={`/${coinId}/price`}>Price</Link>\r\n            </Tab>\r\n          </Tabs>\r\n\r\n          <Switch>\r\n            <Route path={`/:coinId/price`}>\r\n              <Price coinId={coinId} />\r\n            </Route>\r\n            <Route path={`/:coinId/chart`}>\r\n              <Chart coinId={coinId} />\r\n            </Route>\r\n          </Switch>\r\n        </>\r\n      )}\r\n      <BackBtn>\r\n        <Link style={{ display: 'block' }} to={{ pathname: `/` }}>\r\n          Back\r\n        </Link>\r\n      </BackBtn>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Coin\r\n","import styled from 'styled-components'\r\nimport { Link } from 'react-router-dom'\r\nimport { useEffect, useState } from 'react'\r\nimport { useQuery } from 'react-query'\r\nimport { fetchCoins } from './api'\r\nimport { Helmet } from 'react-helmet'\r\nimport { useRecoilValue, useSetRecoilState } from 'recoil'\r\nimport { isDarkAtom } from '../atoms'\r\n\r\nconst Container = styled.div`\r\n  padding: 0px 20px;\r\n  // 화면을 크게 했을 때도 모바일화면처럼 요소들이 가운데에 위치함\r\n  max-width: 480px;\r\n  margin: 0 auto;\r\n`\r\n\r\nconst Header = styled.header`\r\n  height: 10vh;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\n\r\nconst CoinsList = styled.ul``\r\n\r\nconst Coin = styled.li`\r\n  background-color: white;\r\n  color: ${(props) => props.theme.bgColor};\r\n  border-radius: 15px;\r\n  margin-bottom: 10px;\r\n  a {\r\n    // 코인 이미지와 이름 가운데 정렬\r\n    display: flex;\r\n    align-items: center;\r\n    //Link 크기에 padding을 넣어주면 Link가 커짐\r\n    padding: 20px;\r\n    // 글자색이 스으윽 바뀜\r\n    transition: color 0.2s ease-in;\r\n  }\r\n  &:hover {\r\n    a {\r\n      color: ${(props) => props.theme.accentColor};\r\n    }\r\n  }\r\n`\r\n\r\nconst Title = styled.h1`\r\n  font-size: 48px;\r\n  color: ${(props) => props.theme.accentColor};\r\n`\r\n\r\nconst Loader = styled.span`\r\n  text-align: center;\r\n  display: block;\r\n`\r\n\r\nconst Img = styled.img`\r\n  width: 35px;\r\n  height: 35px;\r\n  margin-right: 10px;\r\n`\r\n\r\nconst StyledLink = styled(Link)`\r\n  color: rgba(0, 0, 0.5);\r\n`\r\n\r\nconst DarkBtn = styled.button`\r\n  content: '다크모드';\r\n  width: 70px;\r\n  height: 30px;\r\n  border-radius: 50px;\r\n  color: ${(props) => props.theme.bgColor};\r\n  background-color: ${(props) => props.theme.textColor};\r\n`\r\n\r\nconst Overview = styled.div``\r\n\r\ninterface ICoin {\r\n  id: string\r\n  name: string\r\n  symbol: string\r\n  rank: number\r\n  is_new: boolean\r\n  is_active: boolean\r\n  type: string\r\n}\r\n\r\nfunction Coins() {\r\n  const setDarkAtom = useSetRecoilState(isDarkAtom)\r\n  const toggleDarkAtom = () => setDarkAtom((prev) => !prev)\r\n  const isDark = useRecoilValue(isDarkAtom)\r\n  // useQuery(query key, fetcher func)\r\n  // useQuery가 isLoading값을 알아서 리턴함\r\n  // fetchCoins가 끝나면 react query는 그 함수의 데이터를 data에 넣어줌\r\n  const { isLoading, data } = useQuery<ICoin[]>('allCoins', fetchCoins)\r\n\r\n  return (\r\n    <Container>\r\n      <Helmet>\r\n        <Title>코인</Title>\r\n      </Helmet>\r\n      <Header>\r\n        <Title>코인</Title>\r\n        <Overview>\r\n          <DarkBtn onClick={toggleDarkAtom}/>\r\n          {isDark ? <div>Light Mode</div> : <div>Dark Mode</div>}\r\n        </Overview>\r\n      </Header>\r\n      {isLoading ? (\r\n        <Loader>Loading...</Loader>\r\n      ) : (\r\n        <CoinsList>\r\n          {data?.slice(0, 100).map((coin) => (\r\n            <Coin key={coin.id}>\r\n              <StyledLink\r\n                to={{\r\n                  pathname: `/${coin.id}`,\r\n                  state: { name: coin.name },\r\n                }}\r\n              >\r\n                <Img\r\n                  src={`https://cryptocurrencyliveprices.com/img/${coin.id}.png`}\r\n                />\r\n                {coin.name} &rarr;\r\n              </StyledLink>\r\n            </Coin>\r\n          ))}\r\n        </CoinsList>\r\n      )}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Coins\r\n","import { BrowserRouter, Switch, Route } from 'react-router-dom'\r\nimport Coin from './routes/Coin'\r\nimport Coins from './routes/Coins'\r\n\r\nfunction Router() {\r\n  return (\r\n    <BrowserRouter>\r\n      <Switch>\r\n        <Route path=\"/:coinId\">\r\n          <Coin />\r\n        </Route>\r\n        <Route path=\"/\">\r\n          <Coins />\r\n        </Route>\r\n      </Switch>\r\n    </BrowserRouter>\r\n  )\r\n}\r\nexport default Router\r\n","import styled, { DefaultTheme } from 'styled-components'\r\n\r\n// 여기에 우리 테마를 만들거임\r\nexport const darkTheme: DefaultTheme = {\r\n  viewColor: '#353b48',\r\n  bgColor: '#2f3640',\r\n  textColor: '#f5f6fa',\r\n  accentColor: '#8c7ae6',\r\n}\r\n\r\nexport const lightTheme: DefaultTheme = {\r\n  viewColor: '#dcdde1',\r\n  bgColor: '#f5f6fa',\r\n  textColor: '#2f3640',\r\n  accentColor: '#8c7ae6',\r\n}\r\n","import { createGlobalStyle } from 'styled-components'\nimport Router from './Router'\nimport { ReactQueryDevtools } from 'react-query/devtools'\nimport { ThemeProvider } from 'styled-components'\nimport { darkTheme, lightTheme } from './theme'\nimport { useState } from 'react'\nimport { useRecoilValue } from 'recoil'\nimport { isDarkAtom } from './atoms'\n\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, menu, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmain, menu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, main, menu, nav, section {\n  display: block;\n}\n/* HTML5 hidden-attribute fix for newer browsers */\n*[hidden] {\n    display: none;\n}\nbody {\n  line-height: 1;\n}\nmenu, ol, ul {\n  list-style: none;\n}\nblockquote, q {\n  quotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n* {\n  box-sizing: border-box;\n}\nbody {\n  font-weight: 300;\n  // 폰트 설정\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color: ${(props) => props.theme.bgColor};\n  color: ${(props) => props.theme.textColor};\n  line-height: 1.2;\n\n}\na {\n  // 모든 링크가 밑줄 갖지 않게\n  text-decoration: none;\n  // 부모한테서 색 가져오라고\n  color: inherit;\n}\n`\n\nfunction App() {\n  const isDark = useRecoilValue(isDarkAtom)\n  return (\n    <>\n      <ThemeProvider theme={isDark ? darkTheme : lightTheme}>\n        <GlobalStyle />\n        <Router />\n        <ReactQueryDevtools initialIsOpen={true} />\n      </ThemeProvider>\n    </>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { QueryClient, QueryClientProvider } from 'react-query'\nimport { RecoilRoot } from 'recoil'\n\nimport App from './App'\n\nconst queryClient = new QueryClient()\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n    <QueryClientProvider client={queryClient}>\n      <App />\n    </QueryClientProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}